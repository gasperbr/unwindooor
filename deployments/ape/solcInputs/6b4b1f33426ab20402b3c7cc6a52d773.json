{
  "language": "Solidity",
  "sources": {
    "contracts/Auth.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nabstract contract Auth {\n\n    event SetOwner(address indexed owner);\n    event SetTrusted(address indexed user, bool isTrusted);\n\n    address public owner;\n\n    mapping(address => bool) public trusted;\n\n    error OnlyOwner();\n    error OnlyTrusted();\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert OnlyOwner();\n        _;\n    }\n\n    modifier onlyTrusted() {\n        if (!trusted[msg.sender]) revert OnlyTrusted();\n        _;\n    }\n\n    constructor(address newOwner, address trustedUser) {\n        owner = newOwner;\n        trusted[trustedUser] = true;\n\n        emit SetOwner(owner);\n        emit SetTrusted(trustedUser, true);\n    }\n\n    function setOwner(address newOwner) external onlyOwner {\n        owner = newOwner;\n        emit SetOwner(newOwner);\n    }\n\n    function setTrusted(address user, bool isTrusted) external onlyOwner {\n        trusted[user] = isTrusted;\n        emit SetTrusted(user, isTrusted);\n    }\n\n}\n"
    },
    "contracts/Unwindooor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nimport \"./Auth.sol\";\nimport \"./interfaces/IUniV2.sol\";\nimport \"./interfaces/IUniV2Factory.sol\";\n\n/// @notice Contract for withdrawing LP positions.\n/// @dev Calling unwindPairs() withdraws the LP position into one of the two tokens\ncontract Unwindooor is Auth {\n\n    error SlippageProtection();\n    error TransferFailed();\n\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    IUniV2Factory public immutable factory;\n\n    constructor(\n        address owner,\n        address user,\n        address factoryAddress\n    ) Auth(owner, user) {\n        factory = IUniV2Factory(factoryAddress);\n    }\n\n    // We remove liquidity and sell tokensB[i] for tokensA[i].\n    function unwindPairs(\n        address[] calldata tokensA,\n        address[] calldata tokensB,\n        uint256[] calldata amounts,\n        uint256[] calldata minimumOuts\n    ) external onlyTrusted {\n        for (uint256 i = 0; i < tokensA.length; i++) {\n            \n            address tokenA = tokensA[i];\n            address tokenB = tokensB[i];\n            bool keepToken0 = tokenA < tokenB;\n            address pair = _pairFor(tokenA, tokenB);\n\n            if (_unwindPair(IUniV2(pair), amounts[i], keepToken0, tokenB) < minimumOuts[i]) revert SlippageProtection();\n        }\n    }\n\n    // Burn liquidity and sell one of the tokens for the other.\n    function _unwindPair(\n        IUniV2 pair,\n        uint256 amount,\n        bool keepToken0,\n        address tokenToSell\n    ) private returns (uint256 amountOut) {\n\n        pair.transfer(address(pair), amount);\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\n\n        if (keepToken0) {\n            _safeTransfer(tokenToSell, address(pair), amount1);\n            amountOut = _getAmountOut(amount1, uint256(reserve1), uint256(reserve0));\n            pair.swap(amountOut, 0, address(this), \"\");\n            amountOut += amount0;\n        } else {\n            _safeTransfer(tokenToSell, address(pair), amount0);\n            amountOut = _getAmountOut(amount0, uint256(reserve0), uint256(reserve1));\n            pair.swap(0, amountOut, address(this), \"\");\n            amountOut += amount1;\n        }\n    }\n\n    // In case we don't want to sell one of the tokens for the other.\n    function burnPairs(\n        IUniV2[] calldata lpTokens,\n        uint256[] calldata amounts,\n        uint256[] calldata minimumOut0,\n        uint256[] calldata minimumOut1\n    ) external onlyTrusted {\n        for (uint256 i = 0; i < lpTokens.length; i++) {\n            IUniV2 pair = lpTokens[i];\n            pair.transfer(address(pair), amounts[i]);\n            (uint256 amount0, uint256 amount1) = pair.burn(address(this));\n            if (amount0 < minimumOut0[i] || amount1 < minimumOut1[i]) revert SlippageProtection();\n        }\n    }\n\n    function _getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256) {\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        return numerator / denominator;\n    }\n\n    function _safeTransfer(address token, address to, uint value) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) revert TransferFailed();\n    }\n\n    function _pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\n            hex'ff',\n            factory,\n            keccak256(abi.encodePacked(token0, token1)),\n            hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n        )))));\n    }\n\n}\n"
    },
    "contracts/interfaces/IUniV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\nimport \"./IERC20.sol\";\n\ninterface IUniV2 is IERC20 {\n    function totalSupply() external view returns (uint256);\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}"
    },
    "contracts/interfaces/IUniV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\ninterface IUniV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address);\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address addy) external view returns (uint256);\n}"
    },
    "contracts/WethMaker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nimport \"./Unwindooor.sol\";\n\n/// @notice Contract for selling received tokens into weth. Deploy on secondary networks.\ncontract WethMaker is Unwindooor {\n\n    event SetBridge(address indexed token, address bridge);\n\n    address public immutable weth;\n\n    mapping(address => address) public bridges;\n\n    constructor(\n        address owner,\n        address user,\n        address factory,\n        address _weth\n    ) Unwindooor(owner, user, factory) {\n        weth = _weth;\n    }\n\n    function setBridge(address token, address bridge) external onlyOwner {\n        bridges[token] = bridge;\n        emit SetBridge(token, bridge);\n    }\n\n    // Exchange token for weth or its bridge token (which gets converted into weth in subsequent transactions).\n    function buyWeth(\n        address[] calldata tokens,\n        uint256[] calldata amountsIn,\n        uint256[] calldata minimumOuts\n    ) external onlyTrusted {\n        for (uint256 i = 0; i < tokens.length; i++) {\n\n            address tokenIn = tokens[i];\n            address outToken = bridges[tokenIn] == address(0) ? weth : bridges[tokenIn];\n            if (_swap(tokenIn, outToken, amountsIn[i], address(this)) < minimumOuts[i]) revert SlippageProtection();\n            \n        }\n    }\n\n    function _swap(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        address to\n    ) internal returns (uint256 outAmount) {\n\n        IUniV2 pair = IUniV2(_pairFor(tokenIn, tokenOut));\n        _safeTransfer(tokenIn, address(pair), amountIn);\n\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n\n        if (tokenIn < tokenOut) {\n\n            outAmount = _getAmountOut(amountIn, reserve0, reserve1);\n            pair.swap(0, outAmount, to, \"\");\n\n        } else {\n\n            outAmount = _getAmountOut(amountIn, reserve1, reserve0);\n            pair.swap(outAmount, 0, to, \"\");\n\n        }\n\n    }\n\n    // Allow the owner to withdraw the funds and bridge them to mainnet.\n    function withdraw(address token, address to, uint256 _value) onlyOwner external {\n        if (token != address(0)) {\n            _safeTransfer(token, to, _value);\n        } else {\n            (bool success, ) = to.call{value: _value}(\"\");\n            require(success);\n        }\n    }\n\n    function doAction(address to, uint256 _value, bytes memory data) onlyOwner external {\n        (bool success, ) = to.call{value: _value}(data);\n        require(success);\n    }\n\n    receive() external payable {}\n\n}\n"
    },
    "contracts/SushiMaker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nimport \"./WethMaker.sol\";\n\n/// @notice Contract for selling weth to sushi. Deploy on mainnet.\ncontract SushiMaker is WethMaker {\n\n    event Serve(uint256 amount);\n\n    address public immutable sushi;\n    address public immutable xSushi;\n\n    constructor(\n        address owner,\n        address user,\n        address factory,\n        address weth,\n        address _sushi,\n        address _xSushi\n    ) WethMaker(owner, user, factory, weth) {\n        sushi = _sushi;\n        xSushi = _xSushi;\n    }\n\n    function buySushi(uint256 amountIn, uint256 minOutAmount) external onlyTrusted returns (uint256 amountOut) {\n        amountOut = _swap(weth, sushi, amountIn, xSushi);\n        if (amountOut < minOutAmount) revert SlippageProtection();\n        emit Serve(amountOut);\n    }\n\n    function sweep(uint256 amount) external onlyTrusted {\n        IERC20(sushi).transfer(xSushi, amount);\n        emit Serve(amount);\n    }\n\n    // In case we receive any unwrapped ethereum we can call this.\n    function wrapEth() external {\n        weth.call{value: address(this).balance}(\"\");\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}